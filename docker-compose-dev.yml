version: '3.4'

# see docker-compose.yml for defaults extended here

x-signald-overrides: &signald-overrides
  env_file: .env.dev

networks: # see [1]
  default:
    external:
      name: localdev

volumes:
  prometheus_data:
  grafana_data:

services:

  app:
    env_file: .env.dev
    ports:
      - 0.0.0.0:9229:9229

  signald_0:
    <<: *signald-overrides
    ports:
      - 0.0.0.0:8010:8016

  signald_1:
    <<: *signald-overrides
    ports:
      - 0.0.0.0:8011:8016

  signald_2:
    <<: *signald-overrides
    ports:
      - 0.0.0.0:8012:8016

  signald_3:
    <<: *signald-overrides
    ports:
      - 0.0.0.0:8013:8016

  signald_4:
    <<: *signald-overrides
    ports:
      - 0.0.0.0:8014:8016

  ngrok:
    container_name: signalboost_ngrok
    ports:
      - 0.0.0.0:4040:4040
    networks:
      - default
    image: wernight/ngrok
    links:
      - app
    env_file: .env.dev
    environment:
      - NGROK_PORT=app:3000
    restart: always

  prometheus:
    image: prom/prometheus:v2.18.1
    ports:
      - 9090:9090
    user: root
    networks:
      - default
    volumes:
      - ./prometheus/prometheus_dev.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus_data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus_data'
      - '--log.level=debug'
    restart: always

  grafana:
    image: grafana/grafana:7.0.3
    depends_on:
      - prometheus
    ports:
      - 5000:5000
    networks:
      - default
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SERVER_HTTP_PORT=5000
    restart: always

# -----------------------------
# [1] NOTE:
#
# we create a `localdev` network w/ a non-standard subnet mask to be able to use
# use docker from behdind a VPN, which is often necessary to auth w/ Signal.
# (see: https://github.com/docker/for-linux/issues/418#issuecomment-491323611)
#
# USAGE:
#
# for this to work you must first run the following (which is done automatically
# by `make _.setup`):
#
# ```bash
# docker network create localdev --subnet 10.0.1.0/24
# ```
